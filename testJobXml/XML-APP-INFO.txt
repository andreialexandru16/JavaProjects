Pentru crearea unei aplicatii ce se ocupa de gestionarea unor xml-uri am realizat urmatoarele lucruri:

1) Am citit order.xml pentru a identifica structura xml(obiecte,atribute etc);

2) Am creat clasele necesare informatiilor din xml respectiv "Orders" si "Product";

3) Din xml primit reiese ca va fi necesara o lista de produse in clasa "Orders";

4) Am generat metode set, get, toString, constructori pentru clasele "Orders" si "Product";

5) Am creat o metoda statica "citesteNodurile" ce va primi ca parametrii un DOM Document obiect si un int itemNr(numarul comenzii) ce va returna o lista de produse pentru comanda respectiva:
    * In interiorul metodei am creat o lista noua de produse dupa care am luat nodurile ce au ca tag order;
    * Printr-un for am extras (in for am luat pe rand produsele si in if am verificat  tipul nodului si daca acesta este product) informatiile din aceasta, pe care le-am pus in obiecte de tip Product, urmand sa le adaugam listei ce va fi returnata.

6) Am creat o metoda "citesteOrders" ce va primi ca parametru un DOM Document, obiect rezultat din parsarea xml-ului:
    * Se vor lua nodurile cu tagul order;
    * Se vor parcurge cu un for comenzile(order) din xml;
    * In interiorul for-ului se ia fiecare comanda (order) in parte;
    * Printr-un if se verifica nodul, urmand ca informatiile aferente obiectului order sa fie extrase in urmatoarele etape:
                                          1) Pentru atributele tagului order se va folosi metoda "getAttribute".
                                          2) Pentru lista (obiectul de tip orders are o lista de produse) de produse (childNodes) se va apela metoda "citesteNodurile". 

7) Pentru a salva informatiile comenzilor din xml, am declarat un "ArrayList" de Orders. Aceasta lista ne va ajuta pentru crearea xml-urilor pentru fiecare supplier;

8) Dupa ce am realizat citirea datelor din xml si punerea acestora intr-o lista, am trecut la partea in care se vor genera xml-uri separate pentru fiecare supplier:
    *Avand in vedere ca exista posibilitatea de a avea un singur supplier in toate comenzile, am realizat o metoda statica "uniqueSupplier" ce returneaza un boolean si primeste ca parametru lista cu informatiile despre comenzi(orders);
    *Aceasta metoda are ca scop sa verifice daca in xml este un supplier unic;
    *Pentru realizarea acestui lucru am presupus ca lista are un supplier unic, am parcurs lista cu un for si am comparat fiecare supplier cu primul din lista.

9) Dupa realizarea metodei "uniqueSupplier" am creat metoda statica "creareXmlComandaProduse" ce nu va returna nimic si care va primi ca parametru lista cu informatiile despre comenzi (Orders) si numarul (de tip string, ce va fi extras din numele fisierului primit pentru a fi apoi concatenat la crearea numelui fisierului xml pentru fiecare supplier):
    *In interiorul metodei am initializat o variabila de tip boolean ce va primi booleanul returnat de metoda "uniqueSupplier";
    *Se verifica variabila boolean iar daca aceasta este "True":
       *Se va crea un document cu ajutorul "DocumentBuilderFactory" si "DocumentBuilder", iar cu "Element" vom crea arhitectura xml-ului;
       *Se va parcurge lista de comenzi (orders) cu un for, iar cu alt for in interiorul primului se va parcurge lista de produse pentru fiecare comanda din lista de comenzi pentru a crea un xml cu informatii ce vor fi trimise catre supplier;
       *Dupa ce am creat arhitectura xml-ului si am adaugat toate informatiile necesare, se va crea un fisier (cu numele supplier-ului + numarul comenzii primit ca parametru in metoda) intr-un folder cu ajutorul "TransformerFactory", "Transformer", "DOMSource", "StreamResult";
       *Calea folderului corespunzator supplier-ilor unde va fi creat fisierul, va fi pusa in obiectul de tip "StreamResult".
    *Daca variabila este "False", vom avea nevoie de o metoda pentru numele supplier-ilor.
   9.1) Metoda ce se va ocupa de numele suplier-ilor este denumita "crearelistaSupplierOrder" si va primi ca parametru lista de comenzi (orders) si va returna o Colectie de tip Set<String>.
        *Am ales "Set" deoarece nu se poate adauga duplicate si deoarece, in comenzi exista un supplier de mai multe ori, am considerat ca "Set" este cel mai eficient.
    *Dupa ce am comparat variabila booleana si am vazut ca este "False":
         *Am initializat o colectie de tip set ce va primi set-ul returnat de metoda "crearelistaSupplierOrder";
         *Se va parcurge Setul pentru a verifica fiecare supplier, iar in interiorul for-ului se vor realiza urmatoarele etape:
             *Crearea unui document cu ajutorul "DocumentBuilderFactory" si "DocumentBuilder", iar cu "Element" se va crea arhitectura xml-ului; 
             *Parcurgerea listei de comenzi (orders) cu un for, iar cu alt for in interiorul primului, se va parcurge lista de produse pentru fiecare comanda din lista de comenzi;
             *In interiorul celui de al treilea for se compara numele supplier-ului din "Set" cu cel parcurs de cele 2 foruri (primul for pentru lista de orders, iar al doilea pentru lista de produse) si se va crea cate un xml separat pentru fiecare supplier cu informatiile necesare, utilizand aceeasi metoda ca in cazul in care variabila boolean a fost "True";
             *Calea folder-ului corespunzator supplier-ilor unde va fi creat fisierul, va fi pusa in obiectul de tip "StreamResult".

10) In metoda "main" avem nevoie de a citi de la consola numele fisierului pe care il dorim sa il procesam;

11) Am creat un "try catch" pentru a prinde orice exceptie (RunTimeException/OtherException);

12) Pentru a prelua numele de la tastatura am folosit "Scanner";

13) Pentru a verifica fiecare conditie in parte am folosit "split":
     *Am luat numarul comenzii ce va fi transmis ca parametru metodei "creareXmlComandaProduse" pentru crearea numelui fisierului pentru supplier.

14) Am verificat cu un if daca ## sunt cifre folosind "Character.isDigit", daca numele fisierului contine secventa de charuri corespunzatoare ("orders"), daca marimea acestuia este egala cu 8 si daca extensia fisierului este xml.

15)Daca toate conditiile de mai sus sunt indeplinite:
     *Se va accesa fisierul xml din folder-ul corespunzator comenzilor si se va crea un DOM Document din fisierul selectat;
     *Se va apela metoda "citesteOrders";
     *Se va apela metoda "creareXmlComandaProduse";
     *Se vor crea xml-urile pentru supllieri.
  15.1)Daca o vreo conditie a if-ului nu este respectata, atunci se va arunca o Exceptie de tip "CustomException", ce va fi prinsa in blocul "catch" si care va afisa nu mesaj "Numele fisierului este incorect!".

 

   